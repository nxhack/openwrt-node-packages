--- a/script/build.ts
+++ b/script/build.ts
@@ -1,6 +1,7 @@
 import {dirname} from "path"
 import {existsSync, writeFileSync} from "fs"
 import {mkdir, cd, exec, find, mv} from "shelljs"
+import {execSync} from "child_process"
 import {toBool, toString} from "./utils.js"
 
 const root = dirname(__dirname)
@@ -20,7 +21,7 @@ function parseOptions(): Options {
     zmq_draft: toBool(process.env.npm_config_zmq_draft) ?? false,
     zmq_version:
       toString(process.env.npm_config_zmq_version) ??
-      "5657b4586f24ec433930e8ece02ddba7afcf0fe0",
+      "622fc6dde99ee172ebaa9c8628d85a7a1995a21d",
     zmq_build_type:
       toString(process.env.npm_config_zmq_build_type) ?? "Release",
     arch: toString(process.env.npm_config_arch) ?? process.arch,
@@ -60,13 +61,6 @@ function main() {
     }
   }
 
-  build_options += archCMakeOptions(opts)
-
-  if (process.platform === "darwin") {
-    process.env.MACOSX_DEPLOYMENT_TARGET = opts.macosx_deployment_target
-    build_options += ` -DCMAKE_OSX_DEPLOYMENT_TARGET=${opts.macosx_deployment_target}`
-  }
-
   mkdir("-p", libzmq_build_prefix)
   cd(libzmq_build_prefix)
 
@@ -83,11 +77,13 @@ function main() {
     console.log("Found libzmq source; skipping download...")
   } else {
     console.log(`Downloading libzmq source from ${src_url}`)
-    exec(`curl "${src_url}" -fsSL -o "${tarball}"`, execOptions)
+    const execCommand = `curl "${src_url}" -fsSL -o "${tarball}"`
+    execSync(execCommand)
   }
 
   if (!existsSync(src_dir)) {
-    exec(`tar xzf "${tarball}"`, execOptions)
+    const extractTarball = `tar xzf "${tarball}"`
+    execSync(extractTarball)
   }
 
   if (opts.zmq_draft) {
@@ -103,13 +99,52 @@ function main() {
     writeFileSync(clang_format_file, "")
   }
 
+  build_options += " -DCMAKE_CROSSCOMPILING=true"
+  build_options += " -DCMAKE_SYSTEM_NAME=" + process.env.CMAKE_SYSTEM_NAME
+  build_options += " -DCMAKE_SYSTEM_VERSION=" + process.env.CMAKE_SYSTEM_VERSION
+  build_options += " -DCMAKE_SYSTEM_PROCESSOR=" + process.env.CMAKE_SYSTEM_PROCESSOR
+  build_options += " -DCMAKE_BUILD_TYPE=" + process.env.CMAKE_BUILD_TYPE
+  build_options += " -DCMAKE_C_FLAGS_RELEASE=\"" + process.env.CMAKE_C_FLAGS_RELEASE + "\""
+  build_options += " -DCMAKE_CXX_FLAGS_RELEASE=\"" + process.env.CMAKE_CXX_FLAGS_RELEASE + "\""
+  build_options += " -DCMAKE_C_COMPILER_LAUNCHER=" + process.env.CMAKE_C_COMPILER_LAUNCHER
+  build_options += " -DCMAKE_C_COMPILER=" + process.env.CMAKE_C_COMPILER
+  build_options += " -DCMAKE_C_COMPILER_ARG1=" + process.env.CMAKE_C_COMPILER_ARG1
+  build_options += " -DCMAKE_CXX_COMPILER_LAUNCHER=" + process.env.CMAKE_CXX_COMPILER_LAUNCHER
+  build_options += " -DCMAKE_CXX_COMPILER=" + process.env.CMAKE_CXX_COMPILER
+  build_options += " -DCMAKE_CXX_COMPILER_ARG1=" + process.env.CMAKE_CXX_COMPILER_ARG1
+  build_options += " -DCMAKE_ASM_COMPILER=" + process.env.CMAKE_ASM_COMPILER
+  build_options += " -DCMAKE_EXE_LINKER_FLAGS=\"" + process.env.CMAKE_EXE_LINKER_FLAGS + "\""
+  build_options += " -DCMAKE_MODULE_LINKER_FLAGS=\"" + process.env.CMAKE_MODULE_LINKER_FLAGS + "\""
+  build_options += " -DCMAKE_SHARED_LINKER_FLAGS=\"" + process.env.CMAKE_SHARED_LINKER_FLAGS + "\""
+  build_options += " -DCMAKE_AR=" + process.env.CMAKE_AR
+  build_options += " -DCMAKE_NM=" + process.env.CMAKE_NM
+  build_options += " -DCMAKE_RANLIB=" + process.env.CMAKE_RANLIB
+  build_options += " -DCMAKE_FIND_ROOT_PATH=\"" + process.env.CMAKE_FIND_ROOT_PATH + "\""
+  build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
+  build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
+  build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
+  build_options += " -DDL_LIBRARY=\"" + process.env.DL_LIBRARY + "\""
+  build_options += " -DCMAKE_SKIP_RPATH=" + process.env.CMAKE_SKIP_RPATH
+  build_options += " -DCMAKE_EXPORT_PACKAGE_REGISTRY=" + process.env.CMAKE_EXPORT_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=" + process.env.CMAKE_EXPORT_NO_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_FIND_USE_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_USE_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY
+  build_options += " -DCMAKE_SYSROOT=" + process.env.CMAKE_SYSROOT
+  build_options += " -DCROSS_COMPILE=" + process.env.CROSS_COMPILE
+  build_options += " -DCMAKE_OBJCOPY=" + process.env.TARGET_CROSS + "objcopy"
+  build_options += " -DCMAKE_STRIP=" + process.env.TARGET_CROSS + "strip"
+  build_options += " -DCMAKE_DISABLE_FIND_BSD=ON"
+  build_options += " -DWITH_LIBBSD=OFF"
+
   const cmake_configure = `cmake -S "${src_dir}" -B ./build ${build_options} -DCMAKE_BUILD_TYPE=${opts.zmq_build_type} -DCMAKE_INSTALL_PREFIX="${libzmq_install_prefix}" -DCMAKE_INSTALL_LIBDIR=lib -DBUILD_STATIC=ON -DBUILD_TESTS=OFF -DBUILD_SHARED=OFF -DWITH_DOCS=OFF -DWITH_LIBSODIUM=OFF`
   console.log(cmake_configure)
-  exec(cmake_configure, execOptions)
+  execSync(cmake_configure)
 
   const cmake_build = `cmake --build ./build --config ${opts.zmq_build_type} --target install --parallel`
   console.log(cmake_build)
-  exec(cmake_build, execOptions)
+  execSync(cmake_configure)
 
   if (process.platform === "win32") {
     // rename libzmq-v143-mt-s-4_3_4.lib to libzmq.lib
