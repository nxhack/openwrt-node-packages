--- a/script/build.js
+++ b/script/build.js
@@ -10,7 +10,7 @@ function parseOptions() {
         zmq_shared: (0, utils_js_1.toBool)(process.env.npm_config_zmq_shared) ?? false,
         zmq_draft: (0, utils_js_1.toBool)(process.env.npm_config_zmq_draft) ?? false,
         zmq_version: (0, utils_js_1.toString)(process.env.npm_config_zmq_version) ??
-            "5657b4586f24ec433930e8ece02ddba7afcf0fe0",
+            "622fc6dde99ee172ebaa9c8628d85a7a1995a21d",
         zmq_build_type: (0, utils_js_1.toString)(process.env.npm_config_zmq_build_type) ?? "Release",
         arch: (0, utils_js_1.toString)(process.env.npm_config_arch) ?? process.arch,
         macosx_deployment_target: (0, utils_js_1.toString)(process.env.npm_config_macosx_deployment_target) ?? "10.15",
@@ -38,11 +38,11 @@ function main() {
             build_options += " -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL";
         }
     }
-    build_options += archCMakeOptions(opts);
-    if (process.platform === "darwin") {
-        process.env.MACOSX_DEPLOYMENT_TARGET = opts.macosx_deployment_target;
-        build_options += ` -DCMAKE_OSX_DEPLOYMENT_TARGET=${opts.macosx_deployment_target}`;
-    }
+    // build_options += archCMakeOptions(opts);
+    // if (process.platform === "darwin") {
+    //     process.env.MACOSX_DEPLOYMENT_TARGET = opts.macosx_deployment_target;
+    //     build_options += ` -DCMAKE_OSX_DEPLOYMENT_TARGET=${opts.macosx_deployment_target}`;
+    // }
     (0, shelljs_1.mkdir)("-p", libzmq_build_prefix);
     (0, shelljs_1.cd)(libzmq_build_prefix);
     if ((0, fs_1.existsSync)(installed_artifact)) {
@@ -70,6 +70,46 @@ function main() {
     if ((0, fs_1.existsSync)(clang_format_file)) {
         (0, fs_1.writeFileSync)(clang_format_file, "");
     }
+
+    build_options += " -DCMAKE_CROSSCOMPILING=true";
+    build_options += " -DCMAKE_SYSTEM_NAME=" + process.env.CMAKE_SYSTEM_NAME;
+    build_options += " -DCMAKE_SYSTEM_VERSION=" + process.env.CMAKE_SYSTEM_VERSION;
+    build_options += " -DCMAKE_SYSTEM_PROCESSOR=" + process.env.CMAKE_SYSTEM_PROCESSOR;
+    build_options += " -DCMAKE_BUILD_TYPE=" + process.env.CMAKE_BUILD_TYPE;
+    build_options += " -DCMAKE_C_FLAGS_RELEASE=\"" + process.env.CMAKE_C_FLAGS_RELEASE + "\"";
+    build_options += " -DCMAKE_CXX_FLAGS_RELEASE=\"" + process.env.CMAKE_CXX_FLAGS_RELEASE + "\"";
+    build_options += " -DCMAKE_C_COMPILER_LAUNCHER=" + process.env.CMAKE_C_COMPILER_LAUNCHER;
+    build_options += " -DCMAKE_C_COMPILER=" + process.env.CMAKE_C_COMPILER;
+    build_options += " -DCMAKE_C_COMPILER_ARG1=" + process.env.CMAKE_C_COMPILER_ARG1;
+    build_options += " -DCMAKE_CXX_COMPILER_LAUNCHER=" + process.env.CMAKE_CXX_COMPILER_LAUNCHER;
+    build_options += " -DCMAKE_CXX_COMPILER=" + process.env.CMAKE_CXX_COMPILER;
+    build_options += " -DCMAKE_CXX_COMPILER_ARG1=" + process.env.CMAKE_CXX_COMPILER_ARG1;
+    build_options += " -DCMAKE_ASM_COMPILER=" + process.env.CMAKE_ASM_COMPILER;
+    build_options += " -DCMAKE_EXE_LINKER_FLAGS=\"" + process.env.CMAKE_EXE_LINKER_FLAGS + "\"";
+    build_options += " -DCMAKE_MODULE_LINKER_FLAGS=\"" + process.env.CMAKE_MODULE_LINKER_FLAGS + "\"";
+    build_options += " -DCMAKE_SHARED_LINKER_FLAGS=\"" + process.env.CMAKE_SHARED_LINKER_FLAGS + "\"";
+    build_options += " -DCMAKE_AR=" + process.env.CMAKE_AR;
+    build_options += " -DCMAKE_NM=" + process.env.CMAKE_NM;
+    build_options += " -DCMAKE_RANLIB=" + process.env.CMAKE_RANLIB;
+    build_options += " -DCMAKE_FIND_ROOT_PATH=\"" + process.env.CMAKE_FIND_ROOT_PATH + "\"";
+    build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_PROGRAM;
+    build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_LIBRARY;
+    build_options += " -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=" + process.env.CMAKE_FIND_ROOT_PATH_MODE_INCLUDE;
+    build_options += " -DDL_LIBRARY=\"" + process.env.DL_LIBRARY + "\"";
+    build_options += " -DCMAKE_SKIP_RPATH=" + process.env.CMAKE_SKIP_RPATH;
+    build_options += " -DCMAKE_EXPORT_PACKAGE_REGISTRY=" + process.env.CMAKE_EXPORT_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=" + process.env.CMAKE_EXPORT_NO_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_FIND_USE_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_USE_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY=" + process.env.CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY;
+    build_options += " -DCMAKE_SYSROOT=" + process.env.CMAKE_SYSROOT;
+    build_options += " -DCROSS_COMPILE=" + process.env.CROSS_COMPILE;
+    build_options += " -DCMAKE_OBJCOPY=" + process.env.TARGET_CROSS + "objcopy";
+    build_options += " -DCMAKE_STRIP=" + process.env.TARGET_CROSS + "strip";
+    build_options += " -DCMAKE_DISABLE_FIND_BSD=ON";
+    build_options += " -DWITH_LIBBSD=OFF";
+
     const cmake_configure = `cmake -S "${src_dir}" -B ./build ${build_options} -DCMAKE_BUILD_TYPE=${opts.zmq_build_type} -DCMAKE_INSTALL_PREFIX="${libzmq_install_prefix}" -DCMAKE_INSTALL_LIBDIR=lib -DBUILD_STATIC=ON -DBUILD_TESTS=OFF -DBUILD_SHARED=OFF -DWITH_DOCS=OFF -DWITH_LIBSODIUM=OFF`;
     console.log(cmake_configure);
     (0, shelljs_1.exec)(cmake_configure, execOptions);
@@ -115,4 +155,4 @@ function archCMakeOptions(opts) {
     }
     return "";
 }
-//# sourceMappingURL=build.js.map
\ No newline at end of file
+//# sourceMappingURL=build.js.map
